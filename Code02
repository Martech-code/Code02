def convert_members_count(count_text):
    try:
        # Remove "thành viên", "members" text
        count_text = count_text.lower().replace('thành viên', '').replace('members', '').strip()
        
        # Handle "triệu" (Vietnamese millions)
        if 'triệu' in count_text.lower():
            number = float(count_text.lower().replace('triệu', '').replace(',', '.').strip())
            return int(number * 1000000)
        
        # Handle K (thousands)
        if 'k' in count_text.lower():
            number = float(count_text.lower().replace('k', '').replace(',', '.'))
            return int(number * 1000)
        
        # Handle M (millions) 
        if 'm' in count_text.lower():
            number = float(count_text.lower().replace('m', '').replace(',', '.'))
            return int(number * 1000000)
            
        # Handle B (billions)
        if 'b' in count_text.lower():
            number = float(count_text.lower().replace('b', '').replace(',', '.'))
            return int(number * 1000000000)
            
        # Handle regular numbers
        return int(count_text.replace(',', ''))
    except:
        return 0

def process_single_group(chrome_instance, group_url, search_keywords, output_file, lock, retry_count=0):
    print(f"[Worker {chrome_instance.worker_id}] Đang xử lý nhóm: {group_url}")
    try:
        chrome_instance.driver.get(group_url)
        time.sleep(random.uniform(2, 3))
		
        
        # Thêm hàm check_page_status vào đây
        def check_page_status(timeout=120):
            """
            Kiểm tra trạng thái tải trang và tự động tải lại nếu bị đứng
            """
            start_time = time.time()
            while True:
                current_time = time.time()
                if current_time - start_time > timeout:
                    print(f"[Worker {chrome_instance.worker_id}] Trang đang bị đứng, đang tải lại...")
                    try:
                        current_url = chrome_instance.driver.current_url
                        chrome_instance.driver.refresh()
                        time.sleep(3)
                        return True
                    except Exception as e:
                        print(f"[Worker {chrome_instance.worker_id}] Lỗi khi tải lại trang: {str(e)}")
                        return False
                
                try:
                    # Kiểm tra xem page có đang ready
                    page_state = chrome_instance.driver.execute_script('return document.readyState;')
                    if page_state == 'complete':
                        return True
                    
                    # Kiểm tra lỗi Out of Memory
                    if "Out Of Memory" in chrome_instance.driver.page_source:
                        print(f"[Worker {chrome_instance.worker_id}] Phát hiện lỗi Out Of Memory, đang tải lại trang...")
                        chrome_instance.driver.refresh()
                        time.sleep(3)
                        return True
                    
                except Exception as e:
                    print(f"[Worker {chrome_instance.worker_id}] Lỗi khi kiểm tra trạng thái: {str(e)}")
                    
                time.sleep(1)

        # Gọi hàm check_page_status trước khi xử lý dữ liệu của nhóm
        if not check_page_status():
            if retry_count < MAX_RETRIES:
                print(f"[Worker {chrome_instance.worker_id}] Tải lại trang và thử lại...")
                time.sleep(random.uniform(1, 2))
                return process_single_group(chrome_instance, group_url, search_keywords, output_file, lock, retry_count + 1)
            else:
                raise Exception("Không thể tải trang sau nhiều lần thử")
        
		# Thêm xử lý popup block
        if chrome_instance.close_block_popup():
            print(f"[Worker {chrome_instance.worker_id}] Đã đóng popup block")
            time.sleep(random.uniform(1, 2))


        # Check if page loaded properly
        if "content not found" in chrome_instance.driver.page_source.lower() or "không tìm thấy nội dung" in chrome_instance.driver.page_source.lower():
            if retry_count < MAX_RETRIES:
                time.sleep(random.uniform(1, 3))
                return process_single_group(chrome_instance, group_url, search_keywords, output_file, lock, retry_count + 1)
            else:
                raise Exception("Không thể tải trang sau nhiều lần thử")

        # Get group name with explicit wait and retry
        try:
            group_name_element = WebDriverWait(chrome_instance.driver, 5).until(
                EC.presence_of_element_located((By.XPATH, "//h1//a[contains(@class, 'x16tdsg8')]"))
            )
            group_name = group_name_element.text.strip()
        except:
            if retry_count < MAX_RETRIES:
                time.sleep(random.uniform(1, 2))
                return process_single_group(chrome_instance, group_url, search_keywords, output_file, lock, retry_count + 1)
            else:
                raise Exception("Không thể lấy tên nhóm")

        # Get group type with retry
        try:
            group_type_element = WebDriverWait(chrome_instance.driver, 5).until(
                EC.presence_of_element_located((By.XPATH, "//div[contains(text(), 'Nhóm') and contains(@class, 'x1n2onr6')]"))
            )
            group_type = group_type_element.text.strip()
        except:
            group_type = "Unknown"

        # Get members count with retry
        try:
            members_element = WebDriverWait(chrome_instance.driver, 5).until(
                EC.presence_of_element_located((By.XPATH, "//a[contains(@href, '/members/')]"))
            )
            members_text = members_element.text
            members_match = re.search(r'([\d,\.]+[KMB]?) thành viên', members_text)
            members_count = members_match.group(1) if members_match else "0"
        except:
            if retry_count < MAX_RETRIES:
                time.sleep(random.uniform(1, 2))
                return process_single_group(chrome_instance, group_url, search_keywords, output_file, lock, retry_count + 1)
            else:
                raise Exception("Không thể lấy số lượng thành viên")

        # Convert members count to actual number
        numeric_members_count = convert_members_count(members_count)

        # Random scroll 3-6 times
        num_scrolls = random.randint(3, 6)
        for _ in range(num_scrolls):
            chrome_instance.driver.execute_script("window.scrollBy(0, 600)")
            time.sleep(random.uniform(0.5, 1))

        group_data = {
            'keyword_search': search_keywords,
            'group_name': group_name,
            'group_link': group_url,
            'group_type': group_type,
            'members_count': numeric_members_count
        }

        # Save with lock and verification
        with lock:
            try:
                write_header = not os.path.exists(output_file)
                with open(output_file, 'a', newline='', encoding='utf-8-sig') as f:
                    writer = csv.DictWriter(f, fieldnames=list(group_data.keys()))
                    if write_header:
                        writer.writeheader()
                    writer.writerow(group_data)
                print(f"[Worker {chrome_instance.worker_id}] Đã lưu thành công nhóm: {group_name}")
                return True
            except Exception as e:
                print(f"[Worker {chrome_instance.worker_id}] Lỗi lưu dữ liệu: {str(e)}")
                return False

    except Exception as e:
        print(f"[Worker {chrome_instance.worker_id}] Lỗi xử lý nhóm {group_url}: {str(e)}")
        chrome_instance.failed_urls.append({
            'url': group_url,
            'error': str(e),
            'timestamp': datetime.now().isoformat()
        })
        if retry_count < MAX_RETRIES:
            time.sleep(random.uniform(1, 2))
            return process_single_group(chrome_instance, group_url, search_keywords, output_file, lock, retry_count + 1)
        return False

def worker_process(chrome_instance: ChromeInstance, keywords: List[str], processed_items: set, processed_groups: set, lock, output_dir):
    try:
        driver = chrome_instance.create_driver()
        output_file = os.path.join(output_dir, 'groups_data.csv')
        retry_count = 0

        # Kiểm tra và load tiến độ trước đó
        progress_data = chrome_instance.load_progress(output_dir)
        if progress_data:
            print(f"[Worker {chrome_instance.worker_id}] Tìm thấy tiến độ trước đó:")
            print(f"- Keyword: {progress_data['keyword']}")
            print(f"- Số URL còn lại: {len(progress_data['urls']) - progress_data['current_index']}")
            
            # Tiếp tục xử lý các URL còn lại từ lần trước
            total_remaining = len(progress_data['urls']) - progress_data['current_index']
            processed_urls = 0
            failed_urls = 0
            
            for idx, group_url in enumerate(progress_data['urls'][progress_data['current_index']:], 1):
                if group_url in processed_groups:
                    processed_urls += 1
                    continue

                print(f"[Worker {chrome_instance.worker_id}] Đang xử lý nhóm còn lại {idx}/{total_remaining}")
                
                if process_single_group(chrome_instance, group_url, progress_data['keyword'], output_file, lock):
                    with lock:
                        processed_groups.add(group_url)
                        chrome_instance.processed_groups.add(group_url)
                    processed_urls += 1
                else:
                    failed_urls += 1

                # Lưu tiến độ sau mỗi URL
                chrome_instance.save_progress(
                    progress_data['keyword'],
                    progress_data['urls'],
                    progress_data['current_index'] + idx,
                    output_dir
                )

                time.sleep(random.uniform(MIN_DELAY_BETWEEN_REQUESTS, MAX_DELAY_BETWEEN_REQUESTS))

            # Xóa file tiến độ sau khi hoàn thành
            chrome_instance.clear_progress(output_dir)
            print(f"[Worker {chrome_instance.worker_id}] Đã hoàn thành xử lý các URL còn lại")

        while True:
            if chrome_instance.check_checkpoint():
                chrome_instance.is_checkpoint = True
                print(f"[Worker {chrome_instance.worker_id}] Tài khoản bị checkpoint, dừng worker")
                break

            if chrome_instance.check_blocked():
                chrome_instance.is_blocked = True
                print(f"[Worker {chrome_instance.worker_id}] Tài khoản bị chặn tạm thời, dừng worker")
                break
            
            if chrome_instance.check_suspicious():
                print(f"[Worker {chrome_instance.worker_id}] Đã xử lý cảnh báo suspicious")
                time.sleep(random.uniform(1, 2))
                continue

            with lock:
                if len(keywords) < 2:
                    break
                selected_keywords = random.sample(keywords, 2)
                search_keywords = ' '.join(selected_keywords)

            if search_keywords in processed_items:
                continue

            try:
                encoded_keywords = '%20'.join(search_keywords.split())
                search_url = f"https://www.facebook.com/groups/search/groups?q={encoded_keywords}&filters=eyJwdWJsaWNfZ3JvdXBzOjAiOiJ7XCJuYW1lXCI6XCJwdWJsaWNfZ3JvdXBzXCIsXCJhcmdzXCI6XCJcIn0ifQ%3D%3D"

                print(f"\n[Worker {chrome_instance.worker_id}] Tìm kiếm với từ khóa: {search_keywords}")
                driver.get(search_url)
                time.sleep(random.uniform(2, 3))

                group_urls = chrome_instance.scroll_and_collect_groups()
                if not group_urls:
                    print(f"[Worker {chrome_instance.worker_id}] Không tìm thấy URLs cho từ khóa: {search_keywords}")
                    continue

                save_group_urls(group_urls, search_keywords, output_dir, chrome_instance.worker_id)

                total_urls = len(group_urls)
                processed_urls = 0
                failed_urls = 0

                print(f"[Worker {chrome_instance.worker_id}] Bắt đầu xử lý {total_urls} nhóm...")
                
                for idx, group_url in enumerate(group_urls, 1):
                    if group_url in processed_groups:
                        processed_urls += 1
                        continue

                    print(f"[Worker {chrome_instance.worker_id}] Đang xử lý nhóm {idx}/{total_urls}")
                    
                    # Lưu tiến độ trước khi xử lý mỗi URL
                    chrome_instance.save_progress(
                        search_keywords,
                        group_urls,
                        idx - 1,
                        output_dir
                    )
                    
                    if process_single_group(chrome_instance, group_url, search_keywords, output_file, lock):
                        with lock:
                            processed_groups.add(group_url)
                            chrome_instance.processed_groups.add(group_url)
                        processed_urls += 1
                    else:
                        failed_urls += 1

                    time.sleep(random.uniform(MIN_DELAY_BETWEEN_REQUESTS, MAX_DELAY_BETWEEN_REQUESTS))

                # Xóa file tiến độ sau khi hoàn thành keyword
                chrome_instance.clear_progress(output_dir)

                print(f"[Worker {chrome_instance.worker_id}] Kết quả xử lý keyword '{search_keywords}':")
                print(f"- Tổng số URLs: {total_urls}")
                print(f"- Đã xử lý: {processed_urls}")
                print(f"- Thất bại: {failed_urls}")

                chrome_instance.processed_count += 1
                with lock:
                    processed_items.add(search_keywords)
                    if chrome_instance.processed_count % 10 == 0:
                        save_progress(processed_items, processed_groups, output_dir)

            except Exception as e:
                print(f"[Worker {chrome_instance.worker_id}] Lỗi xử lý từ khóa {search_keywords}: {str(e)}")
                retry_count += 1
                if retry_count >= MAX_RETRIES:
                    print(f"[Worker {chrome_instance.worker_id}] Đã vượt quá số lần thử lại cho phép")
                    break
                time.sleep(random.uniform(2, 4))

    except Exception as e:
        print(f"[Worker {chrome_instance.worker_id}] Lỗi: {str(e)}")
    finally:
        if chrome_instance.failed_urls:
            save_failed_urls(chrome_instance.failed_urls, output_dir, chrome_instance.worker_id)
        if chrome_instance.driver:
            chrome_instance.driver.quit()

def load_keywords(file_path):
    with open(file_path, 'r', encoding='utf-8') as f:
        return [line.strip() for line in f.readlines() if line.strip()]

def load_progress(output_dir):
    try:
        with open(os.path.join(output_dir, 'scan_progress.json'), 'r') as f:
            data = json.load(f)
            return data.get('processed_items', []), set(data.get('processed_groups', []))
    except:
        return [], set()

def save_progress(processed_items, processed_groups, output_dir):
    with open(os.path.join(output_dir, 'scan_progress.json'), 'w') as f:
        json.dump({
            'processed_items': list(processed_items),
            'processed_groups': list(processed_groups)
        }, f)
